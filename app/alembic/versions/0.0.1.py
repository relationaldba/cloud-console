"""Database Schema for v0.0.1

Revision ID: 0.0.1
Revises: 
Create Date: 2024-11-21 03:20:18.472279

"""
from datetime import datetime
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from app.auth.utils import hash_password
from app.alembic.logger import log_migration
from app.config import settings

# revision identifiers, used by Alembic.
revision: str = '0.0.1'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    conn=op.get_bind()
    schema_version = "0.0.1"

    # Step 1 - Create the schema_change_history table
    try:
        step = 1
        description = "Create the schema_change_history table"
        start_time = datetime.now()

        op.create_table(
            'schema_change_history',
            sa.Column('id', sa.Integer, primary_key=True, autoincrement=True),
            sa.Column('schema_version', sa.String(50), nullable=False),
            sa.Column('step', sa.Integer, nullable=False),
            sa.Column('description', sa.String(255), nullable=False),
            sa.Column('started_at', sa.DateTime, server_default=sa.func.now(), nullable=False),
            sa.Column('execution_duration', sa.Float, nullable=True),
            sa.Column('success', sa.Boolean, nullable=False),
            sa.Column('error', sa.String(1000), nullable=True)
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 2
        description = "Create the cloudproviders table"
        start_time = datetime.now()

        op.create_table('cloudproviders',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('code', sa.String(length=32), nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('description', sa.String(length=512), nullable=True),
        sa.Column('active', sa.Boolean(), server_default='true', nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_cloudproviders'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 3
        description = "Create the groups table"
        start_time = datetime.now()

        op.create_table('groups',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('active', sa.Boolean(), server_default='true', nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_groups'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 4
        description = "Create the users table"
        start_time = datetime.now()

        op.create_table('users',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('first_name', sa.String(length=128), nullable=False),
        sa.Column('last_name', sa.String(length=128), nullable=False),
        sa.Column('email', sa.String(length=512), nullable=True),
        sa.Column('password', sa.String(length=512), nullable=False),
        sa.Column('active', sa.Boolean(), server_default='true', nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column('last_login_at', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
        sa.UniqueConstraint('email', name=op.f('uq_users_email'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 5
        description = "Create the environments table"
        start_time = datetime.now()

        op.create_table('environments',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('cloudprovider_id', sa.Integer(), nullable=False),
        sa.Column('aws_region', sa.String(length=128), nullable=False),
        sa.Column('aws_account_id', sa.String(length=128), nullable=False),
        sa.Column('aws_access_key_id', sa.String(length=128), nullable=False),
        sa.Column('aws_secret_access_key', sa.String(length=128), nullable=False),
        sa.Column('active', sa.Boolean(), server_default='true', nullable=False),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['cloudprovider_id'], ['cloudproviders.id'], name='fk_environments_cloudproviders', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='fk_environments_users', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_environments'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 6
        description = "Create the products table"
        start_time = datetime.now()

        op.create_table('products',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=256), nullable=False),
        sa.Column('version', sa.String(length=16), nullable=False),
        sa.Column('description', sa.String(length=256), nullable=True),
        sa.Column('repository_url', sa.String(length=256), nullable=False),
        sa.Column('repository_username', sa.String(length=256), nullable=False),
        sa.Column('repository_password', sa.String(length=256), nullable=True),
        sa.Column('active', sa.Boolean(), server_default='true', nullable=False),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='fk_products_users', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_products'))
        )
        op.create_index('ix_products_id_active', 'products', ['id', 'active'], unique=False)

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 7
        description = "Create the stacks table"
        start_time = datetime.now()

        op.create_table('stacks',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('class_name', sa.String(length=128), nullable=False),
        sa.Column('description', sa.String(length=512), nullable=False),
        sa.Column('active', sa.Boolean(), server_default='true', nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('cloudprovider_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['cloudprovider_id'], ['cloudproviders.id'], name='fk_stacks_cloudproviders', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_stacks'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 8
        description = "Create the deployments table"
        start_time = datetime.now()

        op.create_table('deployments',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('description', sa.String(length=256), nullable=False),
        sa.Column('status', sa.String(length=128), server_default='QUEUED', nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column('environment_id', sa.Integer(), nullable=False),
        sa.Column('stack_id', sa.Integer(), nullable=False),
        sa.Column('product_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['environment_id'], ['environments.id'], name='fk_deployments_environments', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_deployments_products', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['stack_id'], ['stacks.id'], name='fk_deployments_stacks', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_deployments_users', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_deployments'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 9
        description = "Create the roles table"
        start_time = datetime.now()

        op.create_table('roles',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=256), nullable=False),
        sa.Column('group_id', sa.Integer(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('environment_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['environment_id'], ['environments.id'], name='fk_roles_environments', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='fk_roles_groups', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_roles_users', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_roles'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 10
        description = "Create the product properties table"
        start_time = datetime.now()

        op.create_table('product_properties',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('value', sa.String(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('product_id', sa.Integer(), nullable=False),
        sa.Column('deployment_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['deployment_id'], ['deployments.id'], name='fk_product_properties_deployments', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_product_properties_products', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_product_properties'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 11
        description = "Create the stack properties table"
        start_time = datetime.now()

        op.create_table('stack_properties',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('value', sa.String(length=4096), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('stack_id', sa.Integer(), nullable=False),
        sa.Column('deployment_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['deployment_id'], ['deployments.id'], name='fk_stack_properties_deployments', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['stack_id'], ['stacks.id'], name='fk_stack_properties_stacks', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_stack_properties'))
        )

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        step = 12
        description = "Create the group members table"
        start_time = datetime.now()

        op.create_table('group_members',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('group_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='fk_group_members_groups', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_group_members_users', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_group_members'))
        )
        op.create_index('uq_group_members_group_id_user_id', 'group_members', ['group_id', 'user_id'], unique=True)

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


        # Add Metadata
        step = 13
        description = "Add Cloud Providers and Stacks metadata"
        start_time = datetime.now()

        cloudproviders_table = sa.table('cloudproviders',
                    sa.column('code', sa.String),
                    sa.column('name', sa.String),
                    sa.column('description', sa.String))
        op.bulk_insert(cloudproviders_table, [
            {
                "code": "aws",
                "name": "Amazon Web Services",
                "description": "Amazon Web Services"
            }
        ])

        cloudprovider_id = conn.execute(
            sa.text("SELECT id FROM cloudproviders WHERE code = :code"),{'code': 'aws'}).scalar()

        if cloudprovider_id:
            stacks_table = sa.table('stacks',
                        sa.column('name', sa.String),
                        sa.column('class_name', sa.String),
                        sa.column('description', sa.String),
                        sa.column('cloudprovider_id', sa.Integer))
            op.bulk_insert(stacks_table, [
                {
                    "name": "AWS-EC2-STANDALONE",
                    "class_name": "AWSEc2Standalone",
                    "description": "A Standalone stack on an AWS EC2 Instance. Smile CDR and PostgreSQL are installed as docker containers in the EC2 instance.",
                    "cloudprovider_id": cloudprovider_id
                }
            ])

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)



        # Add admin user
        step = 14
        description = "Add admin user"
        start_time = datetime.now()

        users_table = sa.table('users',
                    sa.column('first_name', sa.String),
                    sa.column('last_name', sa.String),
                    sa.column('email', sa.String),
                    sa.column('password', sa.String))
        op.bulk_insert(users_table, [
            {
                "first_name": settings.admin_first_name,
                "last_name": settings.admin_last_name,
                "email": settings.admin_email,
                "password": hash_password(settings.admin_password)
            }
        ])

        end_time = datetime.now()
        execution_duration = (end_time - start_time).total_seconds()
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, execution_duration=execution_duration, success=True, error=None)


    # ### end Alembic commands ###
    except Exception as e:
        log_migration(conn=conn, schema_version=schema_version, step=step, description=description, started_at=start_time, success=False, error=str(e))
        raise e


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('stack_properties')
    op.drop_table('product_properties')
    op.drop_table('roles')
    op.drop_table('deployments')
    op.drop_table('stacks')
    op.drop_table('products')
    op.drop_table('group_members')
    op.drop_table('environments')
    op.drop_table('users')
    op.drop_table('groups')
    op.drop_table('cloudproviders')
    # ### end Alembic commands ###